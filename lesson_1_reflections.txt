How did viewing a diff between two versions of a file help you see the bug that was introduced?
- Highlighted ONLY the changes between the file rather than the whole files, making the bug easy to spot.

How could having easy access to the entire history of a file make you a better programmer in the long term?
- Helps you make comparisons and fix missteps, or perhaps go back to old versions to easily fix disasters

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved like Google Docs does?
- Pros: It is possible to make an informed choice about commits rather than arbitrary saves that make no logical sense (and take up loads more room and make the history harder to fathom).
- Cons: Forget to save

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
- Git recognises that files in a repository are related.

How can you use the commands git log and git diff to view the history of files?
- type git log to view the history - down arrow to scroll
- locate the relevant commit (copy the number)
- type q to quit log
- type git diff and paste the number of the commit then copy and paste the number of the previous commit to see the changes

How might using version control make you more confident to make changes that could break something?
- You can go back and find out what you have broken
- You can revert to the version before the bug (or fix the bug).

Now that you have your workspace set up, what do you want to try using Git for?
- Android programs